//	monoSnippets.scss
//	Evadne Wu at Iridia Productions.

$slice: 9px;
$sliceRaw: 9;

$pack: 8 * $slice;
$packRaw: 8 * $sliceRaw;

$nib: 8px;
$nibRaw: 8;

$stub: 8 * $nib;
$stubRaw: 8 * $nibRaw;

$monoSnippetsDirectory: "lib.monoSnippets/" !default;

$externalPIEPath: "" !default;
$externalPIEPathRequiresMigration: yes !default;

$bodyBackgroundColor: white !default;










//	! 
//	!Everyone & Hacks

	@mixin everyone ($property, $value) {
	
		-webkit-#{$property}: $value;
		-moz-#{$property}: $value;
		-o-#{$property}: $value;
		-uu-#{$property}: $value;
		-icab-#{$property}: $value;
		-khtml-#{$property}: $value;
		-ms-#{$property}: $value;
		#{$property}: $value;
	
	}
	
	@mixin targetIE7 ($property, $value) {
	
	//	Target IE7 and below
		*#{$property}: $value;
		
	}
	
	@mixin hackPIE {
	
		@if $externalPIEPath != "" {
		
			@if $externalPIEPathRequiresMigration == yes {

				behavior: url("##IRIDIA_MIGRATE_DOCUMENT_ROOT##/" + $externalPIEPath);
			
						
			} @else {
			
				behavior: url($externalPIEPath);
			
			}
		
		}
	
	}
	
	
	
	
	
//	! 
//	!Box Model, Positioning & Geometry





	@mixin inlineBlock {
	
	//	Mozilla Firefox
		display: -moz-inline-stack;
		
	//	Nonquirkies
		display: inline-block;
	
	//	IE
		zoom: 1;
		*display: inline;
	
	}





	@mixin borderRadius ($radius: 4.5px, $radius2: $radius, $radius3: $radius, $radius4: $radius) {
		
		@include everyone("border-radius", $radius $radius2 $radius3 $radius4);
		
		-webkit-border-top-left-radius: $radius;
		-webkit-border-top-right-radius: $radius2;
		-webkit-border-bottom-right-radius: $radius3;
		-webkit-border-bottom-left-radius: $radius4;
		
		@include everyone("background-clip", padding-box);
		
		@include hackPIE; 
					
	}
	
	
	
	
	
	@mixin size ($width: 128px, $height: $width) {

		width: $width;
		height: $height;
	
	}
	
	
	
	
		
	@mixin width ($width: 144px, $minWidth: $width, $maxWidth: $width) {

		width: $width;
		min-width: $minWidth;
		max-width: $maxWidth;
	
	}
	
	
	
	
	
	@mixin height ($height: 144px, $minHeight: $height, $maxHeight: $height) {

		height: $height;
		min-height: $minHeight;
		max-height: $maxHeight;
	
	}




		
	@mixin fullInset ($topInset: 0, $rightInset: $topInset, $bottomInset: $topInset, $leftInset: $topInset) {

		display: block;
		position: absolute;

		top: $topInset;
		right: $rightInset;
		bottom: $bottomInset;
		left: $leftInset;
	
	}
	
	@mixin full ($inset: 0) {
	
		@include fullInset($inset, $inset, $inset, $inset);
	
	}
	
	
	
	
	
	@mixin margin ($topMargin: 0, $rightMargin: $topMargin, $bottomMargin: $topMargin, $leftMargin: $topMargin) {
	
		margin: $topMargin $rightMargin $bottomMargin $leftMargin;
	
	}
	
	
	
	
	
	@mixin pseudoBlock {
	
		content: "";
		display: block;
	
	}
	
	
	
	
	
	@mixin anchoredToEdgeWithContextWidth ($anchoringEdge: "right", $contextWidth: 960px) {
	
	//	Aligns the element within a 100%-width element to an imaginary left or right boundry.
	
		position: absolute;
		@include fullInset(auto);
		
		#{$anchoringEdge}: 50%;
		margin-#{$anchoringEdge}: -0.5 * $contextWidth;
	
	}
	
	
	
	
	
	@mixin hide {
	
		width: 0 !important;
		max-width: 0 !important;
		height: 0 !important;
		max-height: 0 !important;
		opacity: 0 !important;
		margin: 0 !important;
		padding: 0 !important;
		overflow: hidden !important;
	
	}















//	! 
//	!Text & Typography





	@mixin colorComposite ($propertyName: "color", $elementColor: rgba(128, 128, 128, .5), $repeatOriginal:repeatOriginal, $canvasColor: $bodyBackgroundColor) {
	
		$canvasAlpha: opacity($canvasColor);
		$canvasRed: red($canvasColor);
		$canvasGreen: green($canvasColor);
		$canvasBlue: green($canvasColor);
		
		$elementAlpha: opacity($elementColor);
		$elementRed: red($elementColor);
		$elementGreen: green($elementColor);
		$elementBlue: blue($elementColor);
		
		$compositeAlpha: 1 - (1 - $elementAlpha) * (1 - $canvasAlpha);
		$compositeRed: (1 - $elementAlpha) * $canvasRed + $elementRed;
		$compositeGreen: (1 - $elementAlpha) * $canvasGreen + $elementGreen;
		$compositeBlue: (1 - $elementAlpha) * $canvasBlue + $elementBlue;
		
		@if $compositeRed > 255 {	$compositeRed: 255;	}
		@if $compositeGreen > 255 {	$compositeGreen: 255;	}
		@if $compositeBlue > 255 {	$compositeBlue: 255;	}
				
		#{$propertyName}: rgba($compositeRed, $compositeGreen, $compositeBlue, $compositeAlpha);
		
		@if $repeatOriginal == repeatOriginal {
		
		#{$propertyName}: $elementColor;
		
		}
	
	}










//	! 
//	!Text & Typography





	@mixin text ($fontSize: 14px, $lineHeight: 18px, $color: inherit, $important: no, $dyeAnchors: yes) {
	
		@if $fontSize != noop {
		
			font-size: $fontSize;
		
		}
		
		@if $lineHeight != noop {
		
			line-height: $lineHeight;
		
		}
		
		color: $color;
		
		@if $important == important {
		
			font-size: $fontSize !important;
			line-height: $lineHeight !important;
			color: $color !important;
		
		} 
		
		@if $dyeAnchors == yes {
		
			&, a, a:link, a:hover, a:visited {
			
				color: $color;
				text-decoration: none;
			
			}
		
		}
		
	}
	
	
	
	
	
	@mixin textDelimited {

		@include everyone(text-overflow, ellipsis);

		white-space: nowrap;
		overflow: hidden;

		-moz-binding: url($monoSnippetsDirectory + 'lib.monoSnippets.hack.delimitText.firefoxBinding.xml#delimitText');
	
	}
	
	
	
	
	
	@mixin textReset {
	
		font-size: 0;
		line-height: 0;
	
	}
	
	
	
	
	
	@mixin textShadow ($color: rgba(255, 255, 255, .5), $offsetX: 0px, $offsetY: 1px, $spread: 0px) {

		text-shadow: $color $offsetX $offsetY $spread;
	
	}

	@mixin textShadowEngraved ($color: rgba(255, 255, 255, .5)) {
	
		text-shadow: $color 0px 1px 0px;
	
	}

		@mixin textShadowEngraved2 {
		
			text-shadow: 	rgba(255, 255, 255, .2) 0px 1px 0px,
					rgba(0, 0, 0, .15) 0px -1px 0px;
		
		}
	
	
	
	
	
	@mixin textStroke ($color: transparent, $width: 1px) {

		-webkit-text-stroke: $width $color;
	
	}
	
	
	
	
	
	@mixin textPlaceholderColor ($color: rgba(0, 0, 0, .35)) {
		
		&::-webkit-input-placeholder {
		
			color: $color;
		
		}
	
	}
	
	
	
	
	
	@mixin textSelectionColor ($backgroundColor: rgba(0, 0, 0, .5), $highlightColor: white) {
	
		::selection, ::-moz-selection, ::-webkit-selection {
		
			background-color: $backgroundColor;
			color: $highlightColor;
		
		}
	
	}
	
	
	
	
	
	@mixin textReplacement {
	
		@include uaDisableSelection;
		@include textReset; 
		color: transparent !important;
		text-shadow: none;
		overflow: hidden; 
		display: block;
	
	}










//	! 
//	!Transitions & Animations





	@mixin transition ($duration: 1s, $timingFunction: linear) {
	
		@include everyone(transition, all $duration $timingFunction);
	
	}
	
		@mixin transition1 ($duration: 1s, $property1: all) {
		
			@include transition($duration);
			@include everyone(transition-property, $property1);
		
		}
	
		@mixin transition2 ($duration: 1s, $property1: all, $property2: property1) {
		
			@include transition($duration);
			@include everyone(transition-property, $property1 + "," + $property2);
		
		}
	
	
	
	
	
	@mixin animation ($name: name, $duration: 1s, $count: infinite, $timingFunction: none) {
	
		-webkit-animation-name: $name;
		-webkit-animation-duration: $duration;
		-webkit-animation-iteration-count: $count;
		-webkit-animation-timing-function: $timingFunction
	
	}










//	! 
//	!Backdrops, Borders and 9-Slices

	@mixin borderImage ($image: none, $borderTopWidth: 0, $borderRightWidth: $borderTopWidth, $borderBottomWidth: $borderTopWidth, $borderLeftWidth: $borderTopWidth, $borderScaling: round, $centerPiece: fill) {
	
		@include everyone(border-image, $image $borderTopWidth $borderRightWidth $borderBottomWidth $borderLeftWidth $borderScaling $borderScaling); 
		
	//	@include everyone(border-image-slice, $borderTopWidth $borderRightWidth $borderBottomWidth $borderLeftWidth $centerPiece);
		
		border-top: 1px * $borderTopWidth solid transparent;	
		border-right: 1px * $borderRightWidth solid transparent;
		border-bottom: 1px * $borderBottomWidth solid transparent;
		border-left: 1px * $borderLeftWidth solid transparent;
				
		@include hackPIE;
		
	}
	
		@mixin threePartImage ($image: none, $borderLeftWidth: 0, $borderRightWidth: 0) {
		
			@include borderImage($image, 0, $borderRightWidth, 0, $borderLeftWidth, stretch);
			border-left-width: 1px * $borderLeftWidth;
			border-right-width: 1px * $borderRightWidth;
		
		}
		
		@mixin threePartImageVertical ($image: none, $borderTopWidth: 0, $borderBottomWidth: 0) {
		
			@include borderImage($image, 0, $borderTopWidth, 0, $borderBottomWidth, stretch);
			border-top-width: 1px * $borderTopWidth;
			border-bottom-width: 1px * $borderBottomWidth;
		
		}










//	! 
//	!Box Shadow Literals

	@mixin boxShadowWithLiteral ($literal01: "", $literal02: "", $literal03: "", $literal04: "", $literal05: "", $literal06: "", $literal07: "", $literal08: "", $literal09: "", $literal10: "", $literal11: "", $literal12: "") {
	
		$concatnatedString: $literal01;

		@if $literal02 != "" {	$concatnatedString: #{$concatnatedString}, #{$literal02};	}
		@if $literal03 != "" {	$concatnatedString: #{$concatnatedString}, #{$literal03};	}
		@if $literal04 != "" {	$concatnatedString: #{$concatnatedString}, #{$literal04};	}
		@if $literal05 != "" {	$concatnatedString: #{$concatnatedString}, #{$literal05};	}
		@if $literal06 != "" {	$concatnatedString: #{$concatnatedString}, #{$literal06};	}	
		@if $literal07 != "" {	$concatnatedString: #{$concatnatedString}, #{$literal07};	}	
		@if $literal08 != "" {	$concatnatedString: #{$concatnatedString}, #{$literal08};	}
		@if $literal09 != "" {	$concatnatedString: #{$concatnatedString}, #{$literal09};	}
		@if $literal10 != "" {	$concatnatedString: #{$concatnatedString}, #{$literal10};	}
		@if $literal11 != "" {	$concatnatedString: #{$concatnatedString}, #{$literal11};	}
		@if $literal12 != "" {	$concatnatedString: #{$concatnatedString}, #{$literal12};	}

		@include everyone(box-shadow, $concatnatedString);
			
	}
	









//	! 
//	!Box Shadows

	@mixin boxShadow ($color: rgba(0, 0, 0, 1), $offsetX: 0px, $offsetY: 0px, $spread: 9px) {
	
		@include boxShadowWithLiteral(
			
			$offsetX $offsetY $spread $color
			
		);
	
	}
	
		@mixin boxShadowInner ($color: rgba(0, 0, 0, 1), $offsetX: 0px, $offsetY: 0px, $spread: 9px) {
	
			@include boxShadowWithLiteral(
			
				inset $offsetX $offsetY $spread $color
			
			);
		
		}
		
			@mixin boxShadowInnerSolidOutset ($insetColor: transparent, $insetOffsetX: 0px, $insetOffsetY: 0px, $insetSpread: 9px, $outsetColor: transparent, $outsetWidth: 1px) {
	
				@include boxShadowWithLiteral(
				
					inset $insetOffsetX $insetOffsetY $insetSpread $insetColor,
					0px $outsetWidth 0px $outsetColor, 
					0px (-1 * $outsetWidth) 0px $outsetColor, 
					$outsetWidth 0px 0px $outsetColor, 
					(-1 * $outsetWidth) 0px 0px $outsetColor
				
				);
			
			}
		
			@mixin boxShadowInnerEngraved ($shadowColor: rgba(0, 0, 0, 1), $shadowOffsetX: 0px, $shadowOffsetY: 0px, $shadowSpread: 9px, $colorTopEngrave: transparent, $colorBottomEngrave: transparent) {
		
		
				@include boxShadowWithLiteral(
				
					inset $shadowOffsetX $shadowOffsetY $shadowSpread $shadowColor, 
					0px -1px 0px $colorTopEngrave, 
					0px 1px 0px $colorBottomEngrave
				
				);
				
			}
	
		@mixin boxShadow2 ($color01: rgba(0, 0, 0, 1), $offsetX01: 0px, $offsetY01: 0px, $spread01: 9px, $color02: $color01, $offsetX02: $offsetX01, $offsetY02: $offsetY01, $spread02: $spread01) {
			
			@include boxShadowWithLiteral(
			
				$color01 $offsetX01 $offsetY01 $spread01, 
				$color02 $offsetX02 $offsetY02 $spread02
			
			);
		
		}
		
		@mixin boxShadow3 ($color01: rgba(0, 0, 0, 1), $offsetX01: 0px, $offsetY01: 0px, $spread01: 9px, $color02: $color01, $offsetX02: $offsetX01, $offsetY02: $offsetY01, $spread02: $spread01, $color03: $color01, $offsetX03: $offsetX01, $offsetY03: $offsetY01, $spread03: $spread01) {
		
			@include boxShadowWithLiteral(
			
				$color01 $offsetX01 $offsetY01 $spread01, 
				$color02 $offsetX02 $offsetY02 $spread02, 
				$color03 $offsetX03 $offsetY03 $spread03
			
			);
		
		}
	
	
	
	
	
	




	
	
	
	
	
//	! 
//	! Inset Borders & Faux Inset Borders

	@mixin borderInset ($side: "", $color: transparent, $width: 1px) {
	
		$prefix: "-";
	
		@if ($side == "") {
		
			$prefix: "";
		
		}
		
		margin#{$prefix}#{$side}: -1 * $width;
		border#{$prefix}#{$side}: $width solid $color;
	
	}
	
	@mixin borderInsetSolid ($color: transparent, $width: 1px) {
	
		@include boxShadowWithLiteral(
		
			inset 0px $width 0px $color, 
			inset 0px (-1 * $width) 0px $color, 
			inset $width 0px 0px $color, 
			inset (-1 * $width) 0px 0px $color
			
		);
	
	}
	
		@mixin borderInsetSolidOutset ($insetColor: transparent, $insetWidth: 1px, $outsetColor: transparent, $outsetWidth: 1px, $removeEdges: "") {
	
			$horizontal: 1;
			$vertical: 1;
	
			@if $removeEdges == "horizontal" {
			
				$vertical: 0;
			
			}
			
			@if $removeEdges == "vertical" {
			
				$horizontal: 0;
			
			}
	
			@include boxShadowWithLiteral(
			
				inset 0px ($vertical * $insetWidth) 0px $insetColor, 
				inset 0px (-1 * $vertical * $insetWidth) 0px $insetColor, 
				inset ($horizontal * $insetWidth) 0px 0px $insetColor, 
				inset (-1 * $horizontal * $insetWidth) 0px 0px $insetColor,
				
				0px ($vertical * $outsetWidth) 0px $outsetColor, 
				0px (-1 * $vertical * $outsetWidth) 0px $outsetColor, 
				($horizontal * $outsetWidth) 0px 0px $outsetColor, 
				(-1 * $horizontal * $outsetWidth) 0px 0px $outsetColor
				
			);
		
		}
	
		@mixin borderInsetSolidShadowed ($borderColor: transparent, $borderWidth: 1px, $shadowColor01: transparent, $shadowOffsetX01: 0px, $shadowOffsetY01: 0px, $shadowSpread01: 9px, $shadowInsetOrEmpty01: "", $shadowColor02: transparent, $shadowOffsetX02: 0px, $shadowOffsetY02: 0px, $shadowSpread02: 9px, $shadowInsetOrEmpty02: "", $shadowColor03: transparent, $shadowOffsetX03: 0px, $shadowOffsetY03: 0px, $shadowSpread03: 9px, $shadowInsetOrEmpty03: "", $shadowColor04: transparent, $shadowOffsetX04: 0px, $shadowOffsetY04: 0px, $shadowSpread04: 9px, $shadowInsetOrEmpty04: "") {
	
			@include boxShadowWithLiteral(
			
				inset 0px $borderWidth 0px $borderColor, 
				inset 0px (-1 * $borderWidth) 0px $borderColor, 
				inset $borderWidth 0px 0px $borderColor, 
				inset (-1 * $borderWidth) 0px 0px $borderColor, 
				#{$shadowInsetOrEmpty01} $shadowOffsetX01 $shadowOffsetY01 $shadowSpread01 $shadowColor01, 
				#{$shadowInsetOrEmpty02} $shadowOffsetX02 $shadowOffsetY02 $shadowSpread02 $shadowColor02,
				#{$shadowInsetOrEmpty03} $shadowOffsetX03 $shadowOffsetY03 $shadowSpread03 $shadowColor03,
				#{$shadowInsetOrEmpty04} $shadowOffsetX04 $shadowOffsetY04 $shadowSpread04 $shadowColor04
				
			);
		
		}
	
		@mixin borderInsetSolid2 ($color01: transparent, $width01: 1px, $color02: transparent, $width02: 1px) {
		
			@include boxShadowWithLiteral(
			
				inset 0px $width01 0px $color01, 
				inset 0px (-1 * $width01) 0px $color01,
				inset $width01 0px 0px $color01,
				inset (-1 * $width01) 0px 0px $color01,
				inset 0px $width02 0px $color02,
				inset 0px (-1 * $width02) 0px $color02,
				inset $width02 0px 0px $color02,
				inset (-1 * $width02) 0px 0px $color02
				
			);
					
		}
		
			@mixin borderInsetSolid2Shadowed ($color01: transparent, $width01: 1px, $color02: transparent, $width02: 1px, $shadowColor01: rgba(0, 0, 0, 1), $shadowOffsetX01: 0px, $shadowOffsetY01: 0px, $shadowSpread01: 9px) {
			
				@include boxShadowWithLiteral(
				
					inset 0px $width01 0px $color01, 
					inset 0px (-1 * $width01) 0px $color01,
					inset $width01 0px 0px $color01,
					inset (-1 * $width01) 0px 0px $color01,
					inset 0px $width02 0px $color02,
					inset 0px (-1 * $width02) 0px $color02,
					inset $width02 0px 0px $color02,
					inset (-1 * $width02) 0px 0px $color02,
					$shadowOffsetX01 $shadowOffsetY01 $shadowSpread01 $shadowColor01
					
				);
						
			}
			
			@mixin borderInsetOutsetSolidShadowed ($color01: transparent, $width01: 1px, $color02: transparent, $width02: 1px, $shadowColor01: rgba(0, 0, 0, 1), $shadowOffsetX01: 0px, $shadowOffsetY01: 0px, $shadowSpread01: 9px) {
			
				@include boxShadowWithLiteral(
				
					inset 0px $width01 0px $color01, 
					inset 0px (-1 * $width01) 0px $color01,
					inset $width01 0px 0px $color01,
					inset (-1 * $width01) 0px 0px $color01,
					0px $width02 0px $color02,
					0px (-1 * $width02) 0px $color02,
					$width02 0px 0px $color02,
					(-1 * $width02) 0px 0px $color02,
					$shadowOffsetX01 $shadowOffsetY01 $shadowSpread01 $shadowColor01
					
				);
						
			}
		
		@mixin borderInsetSolidEngraved ($color: transparent, $width: 1px, $colorTopEngrave: transparent, $colorBottomEngrave: transparent) {
	
			@include boxShadowWithLiteral(
			
				inset 0px $width 0px $color,
				inset 0px (-1 * $width) 0px $color,
				inset $width 0px 0px $color,
				inset (-1 * $width) 0px 0px $color,
				0px -1px 0px $colorTopEngrave,
				0px 1px 0px $colorBottomEngrave
					
			);
		
		}










//	! 
//	!Images





	@mixin imageRenderSmooth {
	
		-ms-interpolation-mode: bicubic;
		image-rendering: optimizeQuality;
	
	}
	
	@mixin imageRenderCrisp {
	
		-ms-interpolation-mode: nearest-neighbor;
		image-rendering: -moz-crisp-edges;
		image-rendering: optimizeSpeed;
	
	}
	
	
	
	
	
	@mixin imageScale ($maximumWidth: auto, $maximumHeight: auto, $minimumWidth: 72px, $minimumHeight: 72px) {
	
		@include imageRenderSmooth; 
	
		width: auto;
		height: auto;
		
		@if ($maximumWidth != auto) {
		
			height: $maximumWidth;
			
		}
		
		@if ($maximumHeight != auto) {
		
			height: $maximumHeight;
			
		}
		
		min-width: $minimumWidth;
		min-height: $minimumHeight;
	
	}










//	! 
//	!Transformations





	@mixin transformRotate ($degrees: 0deg, $originX: 50%, $originY: 50%) {
	
		@include everyone(transform, rotate($degrees));
		@include everyone(transform-origin, $originX $originY);
	
	}






























//	! 
//	!Custom Browser UI

	@mixin uiScrollbar ($unitSize: 9px, $trackColor:rgba(0, 0, 0, .15), $thumbColor:rgba(0, 0, 0, .25), $hoverColor:rgba(0, 0, 0, .35)) {

		&::-webkit-scrollbar,
		&::-webkit-scrollbar-button:start:increment,
		&::-webkit-scrollbar-button:start:decrement,
		&::-webkit-scrollbar-button:end:increment,
		&::-webkit-scrollbar-button:end:decrement {
		
			width: $unitSize;
			height: $unitSize;
			display: none;
		
		}
		
		&::-webkit-scrollbar {
		
			display: block;
			    
		}
		
		&::-webkit-scrollbar-track {
		
			@include borderRadius(0.5 * $unitSize);
			background: rgba(0, 0, 0, 0);
			
			:disabled {
			
				display: none;
			
			}
		
		}
		
		&::-webkit-scrollbar-thumb {
		
			@include borderRadius(0.5 * $unitSize);
			background: rgba(0, 0, 0, .25);
			border: 1px inset rgba(0, 0, 0, .15);
			
			-webkit-transition: background-color 2.5s linear;
		
		}
		
		&:hover::-webkit-scrollbar-thumb {
		
			background: rgba(0, 0, 0, .35);
		
		}
		
		&::-webkit-scrollbar-thumb:hover {
		
			background: rgba(0, 0, 0, .55);
		
		}
	
	}
	









//	! 
//	! Overriding UA Behaviors





	@mixin uaDisableSelection {
	
		@include everyone(user-select, none);
	
	}
	
	@mixin uaDisableTextZoom {
	
		@include everyone(text-size-adjuse, none);
		
	}
	
		@mixin uaEnableTextZoom {
		
			@include everyone(text-size-adjust, auto);
		
		}
		
		@mixin uaTextZoom ($ratio: 100%) {
		
			@include everyone(text-size-adjust, $ratio);
		
		}




















//	! 
//	!Gradients and Glares





	@mixin gradientBackdrop ($fromColor: rgba(0, 0, 0, .1), $toColor: rgba(0, 0, 0, .5), $fromLeft: 0%, $fromTop: 0%, $toLeft: 0%, $toTop: 0%) {
	
		@if $fromColor == transparent {
		
			$fromColor: rgba(0, 0, 0, 0);
		
		}
		
		@if $toColor == transparent {
		
			$toColor: rgba(0, 0, 0, 0);
		
		}
		
		@include colorComposite(
		
			background-color,
			mix($fromColor, $toColor)
		
		);
		
	
	//	WebKit	
		
		background-image: -webkit-gradient(linear, $fromLeft $fromTop, $toLeft $toTop, color-stop(0, $fromColor), color-stop(1, $toColor));
		
		
	//	Firefox
		
		$directionHorizontal: "";
		
		@if ($fromLeft < $toLeft) {
		
			$directionHorizontal: "left"
			
		} @elseif ($fromLeft > $toLeft){
		
			$directionHorizontal: "right"
			
		}
		
		$directionVertical: "";
		
		@if ($fromTop < $toTop) {
		
			$directionVertical: "top"
			
		} @elseif ($fromTop > $toTop){
		
			$directionVertical: "bottom"
			
		}
		
		background-image: -moz-linear-gradient(#{$directionHorizontal} #{$directionVertical}, $fromColor, $toColor);
		
		
	//	PIE / IE	
			
		@if ($fromLeft == 0%) and ($fromTop == 0%) and ($toLeft == 0%) and ($toTop == 100%) {
		
			-pie-background: linear-gradient(opacify($fromColor, 1), opacify($toColor, 1));
			@include hackPIE;
		
		}
	
	}
	
	
	
	
	
	@mixin gradientBackdropVertical ($fromColor: rgba(0, 0, 0, .1), $toColor: rgba(0, 0, 0, .5)) {
	
		@include gradientBackdrop($fromColor, $toColor, 0%, 0%, 0%, 100%);
			
	}
	
	
	
	
	
	@mixin gradientBackdropHorizontal ($fromColor: rgba(0, 0, 0, .1), $toColor: rgba(0, 0, 0, .5)) {
	
		background-color: ($fromColor + $toColor) / 2;
	
		background: -webkit-gradient(linear, left top, right top, color-stop(0, $fromColor), color-stop(1, $toColor));
		background: -moz-linear-gradient(left, $fromColor 0%, $toColor 100%);
	
	}





	@mixin glareSplitVertical ($height: 36px, $reversed: no, $colorTopEngrave: rgba(0, 0, 0, .2), $colorBottomEngrave: rgba(255, 255, 255, .45)) {
	
		@include pseudoBlock;
	
		height: 0px;
	
		margin-top: .5 * $height - 1;
		margin-bottom: .5 * $height - 1;
		
		border-top-width: 1px;
		border-top-style: solid;
		@include colorComposite(border-top-color, $colorTopEngrave);
		
		border-bottom-width: 1px;
		border-bottom-style: solid;
		@include colorComposite(border-bottom-color, $colorBottomEngrave);
		
		@if $reversed != no {
		
			@include colorComposite(border-top-color, $colorBottomEngrave);
			@include colorComposite(border-bottom-color, $colorTopEngrave);
		
		}
			
	}
	
	@mixin glareSplitHorizontal ($reversed: no, $width: 18px, $colorLeftEngrave: rgba(0, 0, 0, .2), $colorRightEngrave: rgba(255, 255, 255, .45)) {
	
		@include pseudoBlock;
		
		width: 0px;

		margin-left: .5 * $width - 1;
		margin-right: .5 * $width - 1;
		
		border-left-width: 1px;
		border-left-style: solid;
		@include colorComposite(border-left-color, $colorLeftEngrave);
		
		border-right-width: 1px;
		border-right-style: solid;
		@include colorComposite(border-right-color, $colorRightEngrave);
		
		@if $reversed != no {
		
			@include colorComposite(border-left-color, $colorRightEngrave);
			@include colorComposite(border-right-color, $colorLeftEngrave);
		
		}
			
	}
	
	
	
	
	
	@mixin shadowUp {
	
		background: -webkit-gradient(linear, left top, left bottom, color-stop(0, rgba(0,0,0, 0)), color-stop(1, rgba(0,0,0, 1)));
		background: -moz-linear-gradient(center top, rgba(0,0,0, 0) 0%, rgba(0,0,0, 1) 100%);
	
	}
	
		@mixin shadowUpBlock($height: 4px) {
		
			@include pseudoBlock;

			position: relative;
			top: $height;
			margin-top: -1 * $height;
			
			height: $height;

			@include shadowUp;
			
			margin-left: 0px;
			margin-right: 0px;
			
			opacity: .35;

		}
	
	
	
	
	
	@mixin shadowRight {
	
		background: -webkit-gradient(linear, left top, right top, color-stop(0, rgba(0,0,0, 1)), color-stop(1, rgba(0,0,0, 0)));
		background: -moz-linear-gradient(center left, rgba(0,0,0, 1) 0%, rgba(0,0,0, 0) 100%);
	
	}
	
		@mixin shadowRightBlock($width: 4px) {
		
			@include pseudoBlock;
			@include shadowRight;
			
			width: $width;
			
			margin-left: 0px;
			margin-right: 0px;
			
			opacity: .35;

		}
	
	
	
	
	
	@mixin shadowDown {
	
		background: -webkit-gradient(linear, left top, left bottom, color-stop(0, rgba(0,0,0, 1)), color-stop(1, rgba(0,0,0, 0)));
		background: -moz-linear-gradient(center top, rgba(0,0,0, 1) 0%, rgba(0,0,0, 0) 100%);
	
	}
	
		@mixin shadowDownBlock($height: 4px) {
		
			@include pseudoBlock;
			@include shadowDown;
		
			position: relative;
			top: $height;
			margin-top: -1 * $height;
			
			height: $height;
			
			margin-left: 0px;
			margin-right: 0px;
			
			opacity: .35;

		}
	
	
	
	
	
	@mixin shadowLeft {
	
		background: -webkit-gradient(linear, right top, left top, color-stop(0, rgba(0,0,0, 1)), color-stop(1, rgba(0,0,0, 0)));
		background: -moz-linear-gradient(center right, rgba(0,0,0, 1) 0%, rgba(0,0,0, 0) 100%);
	
	}
	
		@mixin shadowLeftBlock($width: 4px) {
		
			@include pseudoBlock;
			@include shadowLeft;
		
			width: $width;

			margin-left: 0px;
			margin-right: 0px;
			
			opacity: .35;

		}










//	! 
//	!Misc





	@mixin link {
		
		cursor: pointer;
	
	}
	
	
	
	
	
	@mixin triangle ($tipDirection: "top", $edgeLength: 8px, $blockSize: 16px, $color: black) {
	
		@include textReset; 
	
		border: $edgeLength solid $color;
		border-color: transparent;
		
		border-#{$tipDirection}-width: 0;
		
		$ratio: 0.5;
		
		@if $tipDirection == "top" {
		
			border-bottom-color: $color;
		
			border-right-width: $ratio * $edgeLength;
			border-left-width: $ratio * $edgeLength;
			
			margin: (0.5 * ($blockSize - $ratio * $edgeLength)) (0.5 * ($blockSize - $edgeLength));
		
		} @else if $tipDirection == "right" {
		
			border-left-color: $color;
			
			border-top-width: $ratio * $edgeLength;
			border-bottom-width: $ratio * $edgeLength;
			
			margin: (0.5 * ($blockSize - $edgeLength)) (0.5 * ($blockSize - $ratio * $edgeLength));
		
		} @else if $tipDirection == "bottom" {
		
			border-top-color: $color;
			
			border-right-width: $ratio * $edgeLength;
			border-left-width: $ratio * $edgeLength;
			
			margin: (0.5 * ($blockSize - $ratio * $edgeLength)) (0.5 * ($blockSize - $edgeLength));
		
		} @else if $tipDirection == "left" {
		
			border-right-color: $color;
		
			border-top-width: $ratio * $edgeLength;
			border-bottom-width: $ratio * $edgeLength;
			
			margin: (0.5 * ($blockSize - $edgeLength)) (0.5 * ($blockSize - $ratio * $edgeLength));
		
		}
	
	}










//	! 
//	!Numbers





	@mixin styleCircularNumbered ($pseudoSelector:before) {
	
		&:nth-of-type(1):#{$pseudoSelector} {	content: "①";	}
		&:nth-of-type(2):#{$pseudoSelector} {	content: "②";	}
		&:nth-of-type(3):#{$pseudoSelector} {	content: "③";	}
		&:nth-of-type(4):#{$pseudoSelector} {	content: "④";	}		
		&:nth-of-type(5):#{$pseudoSelector} {	content: "⑤";	}
		&:nth-of-type(6):#{$pseudoSelector} {	content: "⑥";	}
		&:nth-of-type(7):#{$pseudoSelector} {	content: "⑦";	}
		&:nth-of-type(8):#{$pseudoSelector} {	content: "⑧";	}
		&:nth-of-type(9):#{$pseudoSelector} {	content: "⑨";	}
	
	}
	
	
	
	
	
	@mixin opacity ($level) {
	
		opacity: $level;
		-moz-opacity: $level;	
		
		@if type-of($level) == "number" {

			filter: progid:DXImageTransform.Microsoft.Alpha(opacity=#{100 * $level});
			-ms-filter: 'progid:DXImageTransform.Microsoft.Alpha(opacity=#{100 * $level})';
		
		}
	
	}




















//	! 
//	!Pointer Handling
	
	
	
	
	@mixin pointerEventsOff {
	
		@include everyone(pointer-events, none);
	
	}
	
	
	
	
	
	
	
	
	
	