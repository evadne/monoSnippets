//	monoSnippets.scss
//	Evadne Wu at Iridia Productions.
	
	
	
	
	
	$irMigratorEnabled: yes !default;

	$pathMonoSnippets: "lib.monoSnippets/" !default;
	$pathPIE: "" !default;
	$pathIRMigrator: "" !default; 
	
	$irMigratorPrefix: "##IRIDIA_MIGRATE_DOCUMENT_ROOT##/" !default;

	@if ($irMigratorEnabled == yes) {

	//	this prefix is to be parsed and found, then replaced by IRMigrator.
		$pathIRMigrator: $irMigratorPrefix;
	
	}
	
	$colorBodyBackground: white !default;
	
	
	
	
	
//	Base Utilities

	@import "lib.monoSnippets.util.enqueuing";
	@import "lib.monoSnippets.util.color";
	@import "lib.monoSnippets.util.positioning";
	
	
//	Applied
	
	@import "lib.monoSnippets.text";
	@import "lib.monoSnippets.transitionAndAnimation";










//	! 
//	!Backdrops, Borders and 9-Slices

	@mixin borderImage ($imageURL:none, $borderTopWidth:0, $borderRightWidth:$borderTopWidth, $borderBottomWidth:$borderTopWidth, $borderLeftWidth:$borderTopWidth, $borderScaling:round, $centerPiece:fill) {
	
		@include everyone(border-image, url($imageURL) $borderTopWidth $borderRightWidth $borderBottomWidth $borderLeftWidth $borderScaling $borderScaling);
				
		border-top: 1px * $borderTopWidth solid transparent;
		border-right: 1px * $borderRightWidth solid transparent;
		border-bottom: 1px * $borderBottomWidth solid transparent;
		border-left: 1px * $borderLeftWidth solid transparent;
		
		border-image: url($pathIRMigrator + $imageURL) $borderTopWidth $borderRightWidth $borderTopWidth $borderLeftWidth fill;
							
		@include hackPIE;
			
	}
	
		@mixin threePartImage ($image: none, $borderLeftWidth: 0, $borderRightWidth: 0) {
		
			@include borderImage($image, 0, $borderRightWidth, 0, $borderLeftWidth, stretch);
			border-left-width: 1px * $borderLeftWidth;
			border-right-width: 1px * $borderRightWidth;
		
		}
		
		@mixin threePartImageVertical ($image: none, $borderTopWidth: 0, $borderBottomWidth: 0) {
		
			@include borderImage($image, 0, $borderTopWidth, 0, $borderBottomWidth, stretch);
			border-top-width: 1px * $borderTopWidth;
			border-bottom-width: 1px * $borderBottomWidth;
		
		}










//	! 
//	!Box Shadow Literals

	@mixin boxShadowWithLiteral ($literal01: "", $literal02: "", $literal03: "", $literal04: "", $literal05: "", $literal06: "", $literal07: "", $literal08: "", $literal09: "", $literal10: "", $literal11: "", $literal12: "") {
	
		@include enqueueStart(box-shadow);
		@include enqueueMany($literal01, $literal02, $literal03, $literal04, $literal05, $literal06, $literal07, $literal08, $literal09, $literal10, $literal11, $literal12); 
		@include enqueueCommit;
					
	}
	









//	! 
//	!Box Shadows

	@mixin boxShadow ($color: rgba(0, 0, 0, 1), $offsetX: 0px, $offsetY: 0px, $spread: 9px) {
	
		@include boxShadowWithLiteral(
			
			$offsetX $offsetY $spread $color
			
		);
	
	}
	
		@mixin boxShadowInner ($color: rgba(0, 0, 0, 1), $offsetX: 0px, $offsetY: 0px, $spread: 9px) {
	
			@include boxShadowWithLiteral(
			
				inset $offsetX $offsetY $spread $color
			
			);
		
		}
		
			@mixin boxShadowInnerSolidOutset ($insetColor: transparent, $insetOffsetX: 0px, $insetOffsetY: 0px, $insetSpread: 9px, $outsetColor: transparent, $outsetWidth: 1px) {
	
				@include boxShadowWithLiteral(
				
					inset $insetOffsetX $insetOffsetY $insetSpread $insetColor,
					0px $outsetWidth 0px $outsetColor, 
					0px (-1 * $outsetWidth) 0px $outsetColor, 
					$outsetWidth 0px 0px $outsetColor, 
					(-1 * $outsetWidth) 0px 0px $outsetColor
				
				);
			
			}
		
			@mixin boxShadowInnerEngraved ($shadowColor: rgba(0, 0, 0, 1), $shadowOffsetX: 0px, $shadowOffsetY: 0px, $shadowSpread: 9px, $colorTopEngrave: transparent, $colorBottomEngrave: transparent) {
		
		
				@include boxShadowWithLiteral(
				
					inset $shadowOffsetX $shadowOffsetY $shadowSpread $shadowColor, 
					0px -1px 0px $colorTopEngrave, 
					0px 1px 0px $colorBottomEngrave
				
				);
				
			}
	
		@mixin boxShadow2 ($color01: rgba(0, 0, 0, 1), $offsetX01: 0px, $offsetY01: 0px, $spread01: 9px, $color02: $color01, $offsetX02: $offsetX01, $offsetY02: $offsetY01, $spread02: $spread01) {
			
			@include boxShadowWithLiteral(
			
				$color01 $offsetX01 $offsetY01 $spread01, 
				$color02 $offsetX02 $offsetY02 $spread02
			
			);
		
		}
		
		@mixin boxShadow3 ($color01: rgba(0, 0, 0, 1), $offsetX01: 0px, $offsetY01: 0px, $spread01: 9px, $color02: $color01, $offsetX02: $offsetX01, $offsetY02: $offsetY01, $spread02: $spread01, $color03: $color01, $offsetX03: $offsetX01, $offsetY03: $offsetY01, $spread03: $spread01) {
		
			@include boxShadowWithLiteral(
			
				$color01 $offsetX01 $offsetY01 $spread01, 
				$color02 $offsetX02 $offsetY02 $spread02, 
				$color03 $offsetX03 $offsetY03 $spread03
			
			);
		
		}
	
	
	
	
	
	




	
	
	
	
	
//	! 
//	! Inset Borders & Faux Inset Borders

	@mixin borderInset ($side: "", $color: transparent, $width: 1px) {
	
		$prefix: "-";
	
		@if ($side == "") {
		
			$prefix: "";
		
		}
		
		margin#{$prefix}#{$side}: -1 * $width;
		border#{$prefix}#{$side}: $width solid $color;
	
	}
	
	@mixin borderInsetSolid ($color: transparent, $width: 1px) {
	
		@include boxShadowWithLiteral(
		
			inset 0px $width 0px $color, 
			inset 0px (-1 * $width) 0px $color, 
			inset $width 0px 0px $color, 
			inset (-1 * $width) 0px 0px $color
			
		);
	
	}
	
		@mixin borderInsetSolidOutset ($insetColor: transparent, $insetWidth: 1px, $outsetColor: transparent, $outsetWidth: 1px, $removeEdges: "") {
	
			$horizontal: 1;
			$vertical: 1;
	
			@if $removeEdges == "horizontal" {
			
				$vertical: 0;
			
			}
			
			@if $removeEdges == "vertical" {
			
				$horizontal: 0;
			
			}
	
			@include boxShadowWithLiteral(
			
				inset 0px ($vertical * $insetWidth) 0px $insetColor, 
				inset 0px (-1 * $vertical * $insetWidth) 0px $insetColor, 
				inset ($horizontal * $insetWidth) 0px 0px $insetColor, 
				inset (-1 * $horizontal * $insetWidth) 0px 0px $insetColor,
				
				0px ($vertical * $outsetWidth) 0px $outsetColor, 
				0px (-1 * $vertical * $outsetWidth) 0px $outsetColor, 
				($horizontal * $outsetWidth) 0px 0px $outsetColor, 
				(-1 * $horizontal * $outsetWidth) 0px 0px $outsetColor
				
			);
		
		}
	
		@mixin borderInsetSolidShadowed ($borderColor: transparent, $borderWidth: 1px, $shadowColor01: transparent, $shadowOffsetX01: 0px, $shadowOffsetY01: 0px, $shadowSpread01: 9px, $shadowInsetOrEmpty01: "", $shadowColor02: transparent, $shadowOffsetX02: 0px, $shadowOffsetY02: 0px, $shadowSpread02: 9px, $shadowInsetOrEmpty02: "", $shadowColor03: transparent, $shadowOffsetX03: 0px, $shadowOffsetY03: 0px, $shadowSpread03: 9px, $shadowInsetOrEmpty03: "", $shadowColor04: transparent, $shadowOffsetX04: 0px, $shadowOffsetY04: 0px, $shadowSpread04: 9px, $shadowInsetOrEmpty04: "") {
	
			@include boxShadowWithLiteral(
			
				inset 0px $borderWidth 0px $borderColor, 
				inset 0px (-1 * $borderWidth) 0px $borderColor, 
				inset $borderWidth 0px 0px $borderColor, 
				inset (-1 * $borderWidth) 0px 0px $borderColor, 
				#{$shadowInsetOrEmpty01} $shadowOffsetX01 $shadowOffsetY01 $shadowSpread01 $shadowColor01, 
				#{$shadowInsetOrEmpty02} $shadowOffsetX02 $shadowOffsetY02 $shadowSpread02 $shadowColor02,
				#{$shadowInsetOrEmpty03} $shadowOffsetX03 $shadowOffsetY03 $shadowSpread03 $shadowColor03,
				#{$shadowInsetOrEmpty04} $shadowOffsetX04 $shadowOffsetY04 $shadowSpread04 $shadowColor04
				
			);
		
		}
	
		@mixin borderInsetSolid2 ($color01: transparent, $width01: 1px, $color02: transparent, $width02: 1px) {
		
			@include boxShadowWithLiteral(
			
				inset 0px $width01 0px $color01, 
				inset 0px (-1 * $width01) 0px $color01,
				inset $width01 0px 0px $color01,
				inset (-1 * $width01) 0px 0px $color01,
				inset 0px $width02 0px $color02,
				inset 0px (-1 * $width02) 0px $color02,
				inset $width02 0px 0px $color02,
				inset (-1 * $width02) 0px 0px $color02
				
			);
					
		}
		
			@mixin borderInsetSolid2Shadowed ($color01: transparent, $width01: 1px, $color02: transparent, $width02: 1px, $shadowColor01: rgba(0, 0, 0, 1), $shadowOffsetX01: 0px, $shadowOffsetY01: 0px, $shadowSpread01: 9px) {
			
				@include boxShadowWithLiteral(
				
					inset 0px $width01 0px $color01, 
					inset 0px (-1 * $width01) 0px $color01,
					inset $width01 0px 0px $color01,
					inset (-1 * $width01) 0px 0px $color01,
					inset 0px $width02 0px $color02,
					inset 0px (-1 * $width02) 0px $color02,
					inset $width02 0px 0px $color02,
					inset (-1 * $width02) 0px 0px $color02,
					$shadowOffsetX01 $shadowOffsetY01 $shadowSpread01 $shadowColor01
					
				);
						
			}
			
			@mixin borderInsetOutsetSolidShadowed ($color01: transparent, $width01: 1px, $color02: transparent, $width02: 1px, $shadowColor01: rgba(0, 0, 0, 1), $shadowOffsetX01: 0px, $shadowOffsetY01: 0px, $shadowSpread01: 9px) {
			
				@include boxShadowWithLiteral(
				
					inset 0px $width01 0px $color01, 
					inset 0px (-1 * $width01) 0px $color01,
					inset $width01 0px 0px $color01,
					inset (-1 * $width01) 0px 0px $color01,
					0px $width02 0px $color02,
					0px (-1 * $width02) 0px $color02,
					$width02 0px 0px $color02,
					(-1 * $width02) 0px 0px $color02,
					$shadowOffsetX01 $shadowOffsetY01 $shadowSpread01 $shadowColor01
					
				);
						
			}
		
		@mixin borderInsetSolidEngraved ($color: transparent, $width: 1px, $colorTopEngrave: transparent, $colorBottomEngrave: transparent) {
	
			@include boxShadowWithLiteral(
			
				inset 0px $width 0px $color,
				inset 0px (-1 * $width) 0px $color,
				inset $width 0px 0px $color,
				inset (-1 * $width) 0px 0px $color,
				0px -1px 0px $colorTopEngrave,
				0px 1px 0px $colorBottomEngrave
					
			);
		
		}










//	! 
//	!Images





	@mixin imageRenderSmooth {
	
		-ms-interpolation-mode: bicubic;
		image-rendering: optimizeQuality;
	
	}
	
	@mixin imageRenderCrisp {
	
		-ms-interpolation-mode: nearest-neighbor;
		image-rendering: -moz-crisp-edges;
		image-rendering: optimizeSpeed;
	
	}
	
	
	
	
	
	@mixin imageScale ($maximumWidth: auto, $maximumHeight: auto, $minimumWidth: 72px, $minimumHeight: 72px) {
	
		@include imageRenderSmooth; 
	
		width: auto;
		height: auto;
		
		@if ($maximumWidth != auto) {
		
			height: $maximumWidth;
			
		}
		
		@if ($maximumHeight != auto) {
		
			height: $maximumHeight;
			
		}
		
		min-width: $minimumWidth;
		min-height: $minimumHeight;
	
	}










//	! 
//	!Transformations





	@mixin transformRotate ($degrees: 0deg, $originX: 50%, $originY: 50%) {
	
		@include everyone(transform, rotate($degrees));
		@include everyone(transform-origin, $originX $originY);
	
	}
	
	@mixin enqueueTransformRotate ($degrees: 0deg) {
		
		@include enqueueStart(transform, true, " ");
		@include enqueue(rotate($degrees));
	
	}
	
	@mixin enqueueTransformScale ($ratio: 1) {
	
		@include enqueueStart(transform, true, " ");
		@include enqueue(scale($ratio));
	
	}
	
	@mixin enqueueTransformTranslate ($deltaX: 0, $deltaY: 0) {
	
		@if unit($deltaX) == "" {	$deltaX: 1px * $deltaX;	}
		@if unit($deltaY) == "" {	$deltaY: 1px * $deltaY;	}

		@include enqueueStart(transform, true, " ");
		@include enqueue(translate($deltaX, $deltaY)); 
	
	}






























//	! 
//	!Custom Browser UI

	@mixin uiScrollbar ($unitSize: 9px, $trackColor:rgba(0, 0, 0, .15), $thumbColor:rgba(0, 0, 0, .25), $hoverColor:rgba(0, 0, 0, .35)) {

		&::-webkit-scrollbar,
		&::-webkit-scrollbar-button:start:increment,
		&::-webkit-scrollbar-button:start:decrement,
		&::-webkit-scrollbar-button:end:increment,
		&::-webkit-scrollbar-button:end:decrement {
		
			width: $unitSize;
			height: $unitSize;
			display: none;
		
		}
		
		&::-webkit-scrollbar {
		
			display: block;
			    
		}
		
		&::-webkit-scrollbar-track {
		
			@include borderRadius(0.5 * $unitSize);
			background: rgba(0, 0, 0, 0);
			
			:disabled {
			
				display: none;
			
			}
		
		}
		
		&::-webkit-scrollbar-thumb {
		
			@include borderRadius(0.5 * $unitSize);
			background: rgba(0, 0, 0, .25);
			border: 1px inset rgba(0, 0, 0, .15);
			
			-webkit-transition: background-color 2.5s linear;
		
		}
		
		&:hover::-webkit-scrollbar-thumb {
		
			background: rgba(0, 0, 0, .35);
		
		}
		
		&::-webkit-scrollbar-thumb:hover {
		
			background: rgba(0, 0, 0, .55);
		
		}
	
	}
	









//	! 
//	! Overriding UA Behaviors





	@mixin uaDisableSelection {
	
		@include everyone(user-select, none);
	
	}
	
	@mixin uaDisableTextZoom {
	
		@include everyone(text-size-adjust, none);
		
	}
	
		@mixin uaEnableTextZoom {
		
			@include everyone(text-size-adjust, auto);
		
		}
		
		@mixin uaTextZoom ($ratio: 100%) {
		
			@include everyone(text-size-adjust, $ratio);
		
		}




















//	! 
//	!Gradients and Glares





	@mixin gradientBackdrop ($fromColor: rgba(0, 0, 0, .1), $toColor: rgba(0, 0, 0, .5), $fromLeft: 0%, $fromTop: 0%, $toLeft: 0%, $toTop: 0%) {
	
		@if $fromColor == transparent {
		
			$fromColor: rgba(0, 0, 0, 0);
		
		}
		
		@if $toColor == transparent {
		
			$toColor: rgba(0, 0, 0, 0);
		
		}
		
		@include colorComposite(
		
			background-color,
			mix($fromColor, $toColor)
		
		);
		
	
	//	WebKit	
		
		background-image: -webkit-gradient(linear, $fromLeft $fromTop, $toLeft $toTop, color-stop(0, $fromColor), color-stop(1, $toColor));
		
		
	//	Firefox
		
		$directionHorizontal: "";
		$directionVertical: "";
		$directionLiteralSpacer: "";
		
		@if ($fromLeft < $toLeft) {
		
			$directionHorizontal: "left"
			
		} @elseif ($fromLeft > $toLeft){
		
			$directionHorizontal: "right"
			
		}
		
		@if ($fromTop < $toTop) {
		
			$directionVertical: "top"
			
		} @elseif ($fromTop > $toTop){
		
			$directionVertical: "bottom"
			
		}
		
		@if $directionHorizontal != "" and $directionVertical != "" {
		
			$directionLiteralSpacer: " ";
		
		}
		
		background-image: -moz-linear-gradient(#{$directionHorizontal}#{$directionLiteralSpacer}#{$directionVertical}, $fromColor, $toColor);
		
		
	//	PIE / IE	
			
		@if ($fromLeft == 0%) and ($fromTop == 0%) and ($toLeft == 0%) and ($toTop == 100%) {
		
			-pie-background: linear-gradient(opacify($fromColor, 1), opacify($toColor, 1));
			@include hackPIE;
		
		}
	
	}
	
	
	
	
	
	@mixin gradientBackdropVertical ($fromColor: rgba(0, 0, 0, .1), $toColor: rgba(0, 0, 0, .5)) {
	
		@include gradientBackdrop($fromColor, $toColor, 0%, 0%, 0%, 100%);
			
	}
	
	
	
	
	
	@mixin gradientBackdropHorizontal ($fromColor: rgba(0, 0, 0, .1), $toColor: rgba(0, 0, 0, .5)) {
	
		@include gradientBackdrop($fromColor, $toColor, 0%, 0%, 100%, 0%);
	
	}





	@mixin glareSplitVertical ($height: 36px, $reversed: no, $colorTopEngrave: rgba(0, 0, 0, .2), $colorBottomEngrave: rgba(255, 255, 255, .45)) {
	
		@include pseudoBlock;
	
		height: 0px;
	
		margin-top: .5 * $height - 1;
		margin-bottom: .5 * $height - 1;
		
		border-top-width: 1px;
		border-top-style: solid;
		@include colorComposite(border-top-color, $colorTopEngrave);
		
		border-bottom-width: 1px;
		border-bottom-style: solid;
		@include colorComposite(border-bottom-color, $colorBottomEngrave);
		
		@if $reversed != no {
		
			@include colorComposite(border-top-color, $colorBottomEngrave);
			@include colorComposite(border-bottom-color, $colorTopEngrave);
		
		}
			
	}
	
	@mixin glareSplitHorizontal ($reversed: no, $width: 18px, $colorLeftEngrave: rgba(0, 0, 0, .2), $colorRightEngrave: rgba(255, 255, 255, .45)) {
	
		@include pseudoBlock;
		
		width: 0px;

		margin-left: .5 * $width - 1;
		margin-right: .5 * $width - 1;
		
		border-left-width: 1px;
		border-left-style: solid;
		@include colorComposite(border-left-color, $colorLeftEngrave);
		
		border-right-width: 1px;
		border-right-style: solid;
		@include colorComposite(border-right-color, $colorRightEngrave);
		
		@if $reversed != no {
		
			@include colorComposite(border-left-color, $colorRightEngrave);
			@include colorComposite(border-right-color, $colorLeftEngrave);
		
		}
			
	}
	
	
	
	
	
		@mixin shadowUp {
	
		background: -webkit-gradient(linear, left top, left bottom, color-stop(0, rgba(0,0,0, 0)), color-stop(1, rgba(0,0,0, 1)));
		background: -moz-linear-gradient(center top, rgba(0,0,0, 0) 0%, rgba(0,0,0, 1) 100%);
	
	}
	
		@mixin shadowUpBlock($height: 4px) {
		
			@include pseudoBlock;

			position: relative;
			top: $height;
			margin-top: -1 * $height;
			
			height: $height;

			@include shadowUp;
			
			margin-left: 0px;
			margin-right: 0px;
			
			opacity: .35;

		}
	
	
	
	
	
	@mixin shadowRight {
	
		background: -webkit-gradient(linear, left top, right top, color-stop(0, rgba(0,0,0, 1)), color-stop(1, rgba(0,0,0, 0)));
		background: -moz-linear-gradient(center left, rgba(0,0,0, 1) 0%, rgba(0,0,0, 0) 100%);
	
	}
	
		@mixin shadowRightBlock($width: 4px) {
		
			@include pseudoBlock;
			@include shadowRight;
			
			width: $width;
			
			margin-left: 0px;
			margin-right: 0px;
			
			opacity: .35;

		}
	
	
	
	
	
	@mixin shadowDown {
	
		background: -webkit-gradient(linear, left top, left bottom, color-stop(0, rgba(0,0,0, 1)), color-stop(1, rgba(0,0,0, 0)));
		background: -moz-linear-gradient(center top, rgba(0,0,0, 1) 0%, rgba(0,0,0, 0) 100%);
	
	}
	
		@mixin shadowDownBlock($height: 4px) {
		
			@include pseudoBlock;
			@include shadowDown;
		
			position: relative;
			top: $height;
			margin-top: -1 * $height;
			
			height: $height;
			
			margin-left: 0px;
			margin-right: 0px;
			
			opacity: .35;

		}
	
	
	
	
	
	@mixin shadowLeft {
	
		background: -webkit-gradient(linear, right top, left top, color-stop(0, rgba(0,0,0, 1)), color-stop(1, rgba(0,0,0, 0)));
		background: -moz-linear-gradient(center right, rgba(0,0,0, 1) 0%, rgba(0,0,0, 0) 100%);
	
	}
	
		@mixin shadowLeftBlock($width: 4px) {
		
			@include pseudoBlock;
			@include shadowLeft;
		
			width: $width;

			margin-left: 0px;
			margin-right: 0px;
			
			opacity: .35;

		}










//	! 
//	!Misc





	@mixin link {
		
		cursor: pointer;
	
	}
	
	
	
	
	
	@mixin triangle ($tipDirection:top, $edgeLength:8px, $blockSize:16px, $color:black, $ratio:0.5) {
	
		@include textReset; 
	
		$horizontalMarginMultiplier: 1;
		$verticalMarginMultiplier: 1;
		
		@if $tipDirection == top or $tipDirection == bottom {
		
			$verticalMarginMultiplier: $ratio;
		
		} @elseif $tipDirection == left or $tipDirection == right {
		
			$horizontalMarginMultiplier: $ratio;
		
		}
		
		$coloredEdge: "";
		
		@if $tipDirection == top { $coloredEdge: bottom; }
		@if $tipDirection == right { $coloredEdge: left; }
		@if $tipDirection == bottom { $coloredEdge: top; }
		@if $tipDirection == left { $coloredEdge: right; }
		
		border: $ratio * $edgeLength solid $color;
		border-color: transparent;
		
		border-#{$tipDirection}-width: $edgeLength;
		border-#{$coloredEdge}-width: $edgeLength;
		
		border-#{$tipDirection}-width: 0;
		
		border-#{$coloredEdge}-color: $color;
		
		margin: (0.5 * ($blockSize - $verticalMarginMultiplier * $edgeLength)) (0.5 * ($blockSize - $horizontalMarginMultiplier * $edgeLength));
	
	}










//	! 
//	!Numbers





	@mixin styleCircularNumbered ($pseudoSelector:before) {
	
		&:nth-of-type(1):#{$pseudoSelector} {	content: "①";	}
		&:nth-of-type(2):#{$pseudoSelector} {	content: "②";	}
		&:nth-of-type(3):#{$pseudoSelector} {	content: "③";	}
		&:nth-of-type(4):#{$pseudoSelector} {	content: "④";	}		
		&:nth-of-type(5):#{$pseudoSelector} {	content: "⑤";	}
		&:nth-of-type(6):#{$pseudoSelector} {	content: "⑥";	}
		&:nth-of-type(7):#{$pseudoSelector} {	content: "⑦";	}
		&:nth-of-type(8):#{$pseudoSelector} {	content: "⑧";	}
		&:nth-of-type(9):#{$pseudoSelector} {	content: "⑨";	}
	
	}
	
	
	
	
	
	@mixin opacity ($level) {
	
		opacity: $level;
		-moz-opacity: $level;	
		
		@if type-of($level) == "number" {

			filter: progid:DXImageTransform.Microsoft.Alpha(opacity=#{100 * $level});
			-ms-filter: 'progid:DXImageTransform.Microsoft.Alpha(opacity=#{100 * $level})';
		
		}
	
	}




















//	! 
//	!Pointer Handling
	
	
	
	
	@mixin pointerEventsOff {
	
		@include everyone(pointer-events, none);
	
	}
	
	
	
	
	
	
	
	
	
	